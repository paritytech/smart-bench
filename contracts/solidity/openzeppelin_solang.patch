diff --git a/contracts/token/ERC721/ERC721.sol b/contracts/token/ERC721/ERC721.sol
index 7942e6f..0756c90 100644
--- a/contracts/token/ERC721/ERC721.sol
+++ b/contracts/token/ERC721/ERC721.sol
@@ -409,10 +409,10 @@ contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
                 if (reason.length == 0) {
                     revert("ERC721: transfer to non ERC721Receiver implementer");
                 } else {
-                    /// @solidity memory-safe-assembly
-                    assembly {
-                        revert(add(32, reason), mload(reason))
-                    }
+                  //  /// @solidity memory-safe-assembly
+                  //  assembly {
+                  //      revert(add(32, reason), mload(reason))
+                  //  }
                 }
             }
         } else {
diff --git a/contracts/utils/Address.sol b/contracts/utils/Address.sol
index 0791a66..0e373de 100644
--- a/contracts/utils/Address.sol
+++ b/contracts/utils/Address.sol
@@ -2,6 +2,7 @@
 // OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)
 
 pragma solidity ^0.8.1;
+import "polkadot";
 
 /**
  * @dev Collection of functions related to the address type
@@ -41,8 +42,7 @@ library Address {
         // This method relies on extcodesize/address.code.length, which returns 0
         // for contracts in construction, since the code is only stored at the end
         // of the constructor execution.
-
-        return account.code.length > 0;
+        return is_contract(account);
     }
 
     /**
@@ -142,7 +142,7 @@ library Address {
      *
      * _Available since v3.3._
      */
-    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
+    function functionStaticCall(address target, bytes memory data) internal returns (bytes memory) {
         return functionStaticCall(target, data, "Address: low-level static call failed");
     }
 
@@ -156,8 +156,8 @@ library Address {
         address target,
         bytes memory data,
         string memory errorMessage
-    ) internal view returns (bytes memory) {
-        (bool success, bytes memory returndata) = target.staticcall(data);
+    ) internal returns (bytes memory) {
+        (bool success, bytes memory returndata) = target.call(data);
         return verifyCallResultFromTarget(target, success, returndata, errorMessage);
     }
 
@@ -230,15 +230,15 @@ library Address {
 
     function _revert(bytes memory returndata, string memory errorMessage) private pure {
         // Look for revert reason and bubble it up if present
-        if (returndata.length > 0) {
-            // The easiest way to bubble the revert reason is using memory via assembly
-            /// @solidity memory-safe-assembly
-            assembly {
-                let returndata_size := mload(returndata)
-                revert(add(32, returndata), returndata_size)
-            }
-        } else {
+        //if (returndata.length > 0) {
+        //    // The easiest way to bubble the revert reason is using memory via assembly
+        //    /// @solidity memory-safe-assembly
+        //    assembly {
+        //        let returndata_size := mload(returndata)
+        //        revert(add(32, returndata), returndata_size)
+        //    }
+        //} else {
             revert(errorMessage);
-        }
+        //}
     }
 }
diff --git a/contracts/utils/Strings.sol b/contracts/utils/Strings.sol
index 657ebd6..8a9e7e8 100644
--- a/contracts/utils/Strings.sol
+++ b/contracts/utils/Strings.sol
@@ -17,25 +17,7 @@ library Strings {
      * @dev Converts a `uint256` to its ASCII `string` decimal representation.
      */
     function toString(uint256 value) internal pure returns (string memory) {
-        unchecked {
-            uint256 length = Math.log10(value) + 1;
-            string memory buffer = new string(length);
-            uint256 ptr;
-            /// @solidity memory-safe-assembly
-            assembly {
-                ptr := add(buffer, add(32, length))
-            }
-            while (true) {
-                ptr--;
-                /// @solidity memory-safe-assembly
-                assembly {
-                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))
-                }
-                value /= 10;
-                if (value == 0) break;
-            }
-            return buffer;
-        }
+        return "{}".format(value);
     }
 
     /**
